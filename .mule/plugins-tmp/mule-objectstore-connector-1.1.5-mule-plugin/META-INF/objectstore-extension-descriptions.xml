<?xml version="1.0" encoding="UTF-8"?>
<extension-documentation>
    <configs>
        <config name="config">
            <description><![CDATA[Default configuration]]></description>
            <parameters/>
        </config>
    </configs>
    <connections>
        <connection name="connection">
            <description><![CDATA[A ConnectionProvider which returns the runtime's default ObjectStoreManager]]></description>
            <parameters>
                <parameter name="reconnection">
                    <description><![CDATA[When the application is deployed, a connectivity test is performed on all connectors. If set to true, deployment will fail if the test doesn't pass after exhausting the associated reconnection strategy]]></description>
                </parameter>
            </parameters>
        </connection>
        <connection name="connection">
            <description><![CDATA[A ConnectionProvider which returns the runtime's default ObjectStoreManager]]></description>
            <parameters>
                <parameter name="reconnection">
                    <description><![CDATA[When the application is deployed, a connectivity test is performed on all connectors. If set to true, deployment will fail if the test doesn't pass after exhausting the associated reconnection strategy]]></description>
                </parameter>
            </parameters>
        </connection>
    </connections>
    <extension name="ObjectStore">
        <description><![CDATA[Connector that provides functionality to access and create ObjectStore instances.]]></description>
        <parameters/>
    </extension>
    <operations>
        <operation name="clear">
            <description><![CDATA[Removes all the contents in the store.]]></description>
            <parameters>
                <parameter name="objectStore">
                    <description><![CDATA[A reference to the ObjectStore to be used. If not defined, the runtime's default partition will be used]]></description>
                </parameter>
            </parameters>
        </operation>
        <operation name="contains">
            <description><![CDATA[Checks if there is any value associated to the given key. If no value exist for the key, then false will be returned. <p> This operation is synchronized on the key level. No other operation will be able to access the same key on the same object store while this operation is running. If the runtime is running on cluster mode, this synchronization is also guaranteed across nodes.]]></description>
            <parameters>
                <parameter name="key">
                    <description><![CDATA[the key of the object to be removed]]></description>
                </parameter>
                <parameter name="objectStore">
                    <description><![CDATA[A reference to the ObjectStore to be used. If not defined, the runtime's default partition will be used]]></description>
                </parameter>
                <parameter name="target">
                    <description><![CDATA[The name of a variable on which the operation's output will be placed]]></description>
                </parameter>
                <parameter name="targetValue">
                    <description><![CDATA[An expression that will be evaluated against the operation's output and the outcome of that expression will be stored in the target variable]]></description>
                </parameter>
            </parameters>
        </operation>
        <operation name="remove">
            <description><![CDATA[Removes the value associated to the given key. If no value exist for the key, then a OS:KEY_NOT_FOUND error will be thrown. <p> This operation is synchronized on the key level. No other operation will be able to access the same key on the same object store while this operation is running. If the runtime is running on cluster mode, this synchronization is also guaranteed across nodes.]]></description>
            <parameters>
                <parameter name="key">
                    <description><![CDATA[the key of the object to be removed]]></description>
                </parameter>
                <parameter name="objectStore">
                    <description><![CDATA[A reference to the ObjectStore to be used. If not defined, the runtime's default partition will be used]]></description>
                </parameter>
            </parameters>
        </operation>
        <operation name="retrieve">
            <description><![CDATA[Retrieves the value stored for the given key. <p> If no value exists for the key, behaviour will depend on the defaultValue parameter. If the parameter was not provided or resolved to a null value, then a OS:KEY_NOT_FOUND error will be thrown. Otherwise, the defaultValue will be returned <b>BUT</b> keep in mind that such value <b>WILL NOT</b> be stored. <p> Finally, this operation is synchronized on the key level. No other operation will be able to access the same key on the same object store while this operation is running. If the runtime is running on cluster mode, this synchronization is also guaranteed across nodes.]]></description>
            <parameters>
                <parameter name="key">
                    <description><![CDATA[the key of the value to be retrieved]]></description>
                </parameter>
                <parameter name="defaultValue">
                    <description><![CDATA[value to be returned if the key doesn't exist in the store]]></description>
                </parameter>
                <parameter name="objectStore">
                    <description><![CDATA[A reference to the ObjectStore to be used. If not defined, the runtime's default partition will be used]]></description>
                </parameter>
                <parameter name="target">
                    <description><![CDATA[The name of a variable on which the operation's output will be placed]]></description>
                </parameter>
                <parameter name="targetValue">
                    <description><![CDATA[An expression that will be evaluated against the operation's output and the outcome of that expression will be stored in the target variable]]></description>
                </parameter>
            </parameters>
        </operation>
        <operation name="retrieveAll">
            <description><![CDATA[Retrieves all the key value pairs in the object store]]></description>
            <parameters>
                <parameter name="objectStore">
                    <description><![CDATA[A reference to the ObjectStore to be used. If not defined, the runtime's default partition will be used]]></description>
                </parameter>
                <parameter name="target">
                    <description><![CDATA[The name of a variable on which the operation's output will be placed]]></description>
                </parameter>
                <parameter name="targetValue">
                    <description><![CDATA[An expression that will be evaluated against the operation's output and the outcome of that expression will be stored in the target variable]]></description>
                </parameter>
            </parameters>
        </operation>
        <operation name="retrieveAllKeys">
            <description><![CDATA[Returns a List containing all keys that the objectStore currently holds values for.]]></description>
            <parameters>
                <parameter name="objectStore">
                    <description><![CDATA[A reference to the ObjectStore to be used. If not defined, the runtime's default partition will be used]]></description>
                </parameter>
                <parameter name="target">
                    <description><![CDATA[The name of a variable on which the operation's output will be placed]]></description>
                </parameter>
                <parameter name="targetValue">
                    <description><![CDATA[An expression that will be evaluated against the operation's output and the outcome of that expression will be stored in the target variable]]></description>
                </parameter>
            </parameters>
        </operation>
        <operation name="store">
            <description><![CDATA[Stores the given value using the given key. <p> This operation can be used either for storing new values or updating existing ones, depending on the value of the failIfPresent. When that parameter is set to false (default value) then any pre existing value associated to that key will be overwritten. If the parameter is set to true, then a OS:KEY_ALREADY_EXISTS error will be thrown instead. <p> Another important consideration is regarding null values. It is not allowed to store a null value. However, a common use case is to obtain a value (most likely by evaluating a expression or transformation), testing the value for not null, storing it if present and doing nothing otherwise. The failOnNullValue parameter simplifies this use case. On its default value of true, a OS:NULL_VALUE error is thrown if a null value is supplied. However, when set to false, a null value will cause this operation to do nothing, no error will be raised but no value will be altered either. <p> Finally, this operation is synchronized on the key level. No other operation will be able to access the same key on the same object store while this operation is running. If the runtime is running on cluster mode, this synchronization is also guaranteed across nodes.]]></description>
            <parameters>
                <parameter name="key">
                    <description><![CDATA[the key of the value to be stored]]></description>
                </parameter>
                <parameter name="value">
                    <description><![CDATA[the value to be stored. Should not be null if failOnNullValue is set to true]]></description>
                </parameter>
                <parameter name="failIfPresent">
                    <description><![CDATA[Whether to fail or update the pre existing value if the key already exists on the store]]></description>
                </parameter>
                <parameter name="failOnNullValue">
                    <description><![CDATA[Whether to fail or skip the operation if the value is null]]></description>
                </parameter>
                <parameter name="objectStore">
                    <description><![CDATA[A reference to the ObjectStore to be used. If not defined, the runtime's default partition will be used]]></description>
                </parameter>
            </parameters>
        </operation>
    </operations>
    <sources/>
    <types>
        <type name="org.mule.extension.objectstore.api.PrivateObjectStore">
            <description><![CDATA[An ObjectStore which can only be defined embedded inside an owning component. No other component
 will be able to reference it, but it will still be available through the ObjectStoreManager.

 Event though this ObjectStore cannot be referenced, it still needs to have a store name, so that it can be
 identifiable in the management tools.

 @since 1.0]]></description>
            <parameters>
                <parameter name="persistent">
                    <description><![CDATA[Whether the store is persistent or transient.]]></description>
                </parameter>
                <parameter name="maxEntries">
                    <description><![CDATA[The max number of entries allowed. Exceeding entries will be removed when expiration thread runs. If absent, then the
 described ObjectStore will have no size boundaries.]]></description>
                </parameter>
                <parameter name="entryTtl">
                    <description><![CDATA[The entry timeout. If absent, then the described ObjectStore will have no time boundaries.]]></description>
                </parameter>
                <parameter name="entryTtlUnit">
                    <description><![CDATA[A #entryTtl]]></description>
                </parameter>
                <parameter name="expirationInterval">
                    <description><![CDATA[How frequently should the expiration thread run.
 <p>
 If #entryTtl are set, then the expiration thread will not run despite of the value set here.
 <p>
 If set to a value lower or equal to zero, then there will be no expiration.]]></description>
                </parameter>
                <parameter name="expirationIntervalUnit">
                    <description><![CDATA[A #expirationInterval]]></description>
                </parameter>
                <parameter name="config-ref">
                    <description><![CDATA[A reference to an os:config element which will be used to declare this ObjectStore.
 <p>
 If not provided, the runtime's default ObjectStoreManager will be used. Setting this parameter is only necessary when
 you want to use a non default ObjectStore implementation. For example, if you want to have a store which is backed by
 redis or JDBC]]></description>
                </parameter>
                <parameter name="alias">
                    <description><![CDATA[A friendly name to refer to this store from the management UI. Provide this alias if you would like it
 to be easier to identify this store. If not provided, Mule will auto generate an ID.]]></description>
                </parameter>
            </parameters>
        </type>
        <type name="org.mule.extension.objectstore.api.TopLevelObjectStore">
            <description><![CDATA[A global object store which any component can reference by name and use.

 @since 1.0]]></description>
            <parameters>
                <parameter name="persistent">
                    <description><![CDATA[Whether the store is persistent or transient.]]></description>
                </parameter>
                <parameter name="maxEntries">
                    <description><![CDATA[The max number of entries allowed. Exceeding entries will be removed when expiration thread runs. If absent, then the
 described ObjectStore will have no size boundaries.]]></description>
                </parameter>
                <parameter name="entryTtl">
                    <description><![CDATA[The entry timeout. If absent, then the described ObjectStore will have no time boundaries.]]></description>
                </parameter>
                <parameter name="entryTtlUnit">
                    <description><![CDATA[A #entryTtl]]></description>
                </parameter>
                <parameter name="expirationInterval">
                    <description><![CDATA[How frequently should the expiration thread run.
 <p>
 If #entryTtl are set, then the expiration thread will not run despite of the value set here.
 <p>
 If set to a value lower or equal to zero, then there will be no expiration.]]></description>
                </parameter>
                <parameter name="expirationIntervalUnit">
                    <description><![CDATA[A #expirationInterval]]></description>
                </parameter>
                <parameter name="config-ref">
                    <description><![CDATA[A reference to an os:config element which will be used to declare this ObjectStore.
 <p>
 If not provided, the runtime's default ObjectStoreManager will be used. Setting this parameter is only necessary when
 you want to use a non default ObjectStore implementation. For example, if you want to have a store which is backed by
 redis or JDBC]]></description>
                </parameter>
            </parameters>
        </type>
    </types>
</extension-documentation>
